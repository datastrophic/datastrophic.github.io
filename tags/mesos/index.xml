<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mesos on datastrophic</title>
    <link>https://datastrophic.github.io/tags/mesos/</link>
    <description>Recent content in mesos on datastrophic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 12 Oct 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://datastrophic.github.io/tags/mesos/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spark JobServer: from Spark Standalone to Mesos, Marathon and Docker</title>
      <link>https://datastrophic.github.io/spark-jobserver-from-spark-standalone-to-mesos-marathon-and-docker-part-i/</link>
      <pubDate>Thu, 12 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://datastrophic.github.io/spark-jobserver-from-spark-standalone-to-mesos-marathon-and-docker-part-i/</guid>
      <description>After several years of running Spark JobServer workloads, the need for better availability and multi-tenancy emerged across several projects author was involved in. This blog post covers design decisions made to provide higher availability and fault tolerance of JobServer installations, multi-tenancy for Spark workloads, scalability and failure recovery automation, and software choices made in order to reach these goals.
Spark JobServer Spark JobServer is widely used across a variety of reporting and aggregating systems.</description>
    </item>
    
    <item>
      <title>Resource Allocation in Mesos: Dominant Resource Fairness</title>
      <link>https://datastrophic.github.io/resource-allocation-in-mesos-dominant-resource-fairness-explained/</link>
      <pubDate>Sun, 27 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://datastrophic.github.io/resource-allocation-in-mesos-dominant-resource-fairness-explained/</guid>
      <description>Apache Mesos provides a unique approach to cluster resource management called two-level scheduling: instead of storing information about available cluster resources in a centralized manner it operates with a notion of resource offers which slave nodes advertise to running frameworks via Mesos master, thus keeping the whole system architecture concise and scalable. Master&amp;rsquo;s allocation module is responsible for making the decisions about which application should receive the next resource offer and it relies on Dominant Resource Fairness(DRF) algorithm for making these decisions.</description>
    </item>
    
  </channel>
</rss>
